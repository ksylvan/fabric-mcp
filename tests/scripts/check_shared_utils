#!/usr/bin/env python
"""Fail if any helper in tests/shared/ is unreachable from test code."""

import ast
import sys
from pathlib import Path

ROOT = Path(__file__).resolve().parents[2]
SHARED_DIR = ROOT / "tests" / "shared"

# Collect all helpers as dotted paths
helpers = {
    py.relative_to(SHARED_DIR).with_suffix("").as_posix().replace("/", ".")
    for py in SHARED_DIR.rglob("*.py")
    if py.stem != "__init__"
}

if not helpers:
    sys.exit(0)


class ImportVisitor(ast.NodeVisitor):
    """Extract helper dependencies from import statements."""

    def __init__(self):
        self.deps: set[str] = set()

    def visit_Import(self, node: ast.Import) -> None:  # pylint: disable=invalid-name
        "Visit import statements and collect dependencies."
        for alias in node.names:
            if alias.name.startswith("tests.shared."):
                target = alias.name[13:]  # len("tests.shared.")
                if target in helpers:
                    self.deps.add(target)

    def visit_ImportFrom(self, node: ast.ImportFrom) -> None:  # pylint: disable=invalid-name
        "Visit import statements and collect dependencies."
        # Absolute imports: from tests.shared[.module] import ...
        if node.level == 0 and node.module and node.module.startswith("tests.shared"):
            prefix = node.module[13:] if node.module != "tests.shared" else ""

            if prefix and prefix in helpers:
                self.deps.add(prefix)

            for alias in node.names:
                if alias.name == "*":
                    self.deps.update(helpers)
                else:
                    target = f"{prefix}.{alias.name}".lstrip(".")
                    if target in helpers:
                        self.deps.add(target)

        # Relative imports: from ..shared import ...
        elif node.level and node.module == "shared":
            for alias in node.names:
                if alias.name in helpers:
                    self.deps.add(alias.name)


def get_dependencies(file_path: Path) -> set[str]:
    """Get helper dependencies from a Python file."""
    try:
        tree = ast.parse(file_path.read_text())
        visitor = ImportVisitor()
        visitor.visit(tree)
        return visitor.deps
    except SyntaxError:
        return set()


# Build dependency graph: helper -> set of helpers it depends on
helper_deps = {
    h: get_dependencies(SHARED_DIR / f"{h.replace('.', '/')}.py") for h in helpers
}

# Find helpers directly imported by test files
test_roots: set[str] = set()
for test_file in ROOT.glob("tests/**/*.py"):
    if SHARED_DIR not in test_file.parents:
        test_roots.update(get_dependencies(test_file))

# Find all reachable helpers via BFS
reachable = set(test_roots)
queue = list(test_roots)
while queue:
    current = queue.pop(0)
    for dep in helper_deps.get(current, set()):
        if dep not in reachable:
            reachable.add(dep)
            queue.append(dep)

# Report results
unused = sorted(helpers - reachable)
if unused:
    print("❌ Unused helpers:")
    for name in unused:
        helper_path = SHARED_DIR / f"{name.replace('.', '/')}.py"
        print(f"  - {helper_path}")
    sys.exit(1)

print("✅ All helpers reachable from tests.")
