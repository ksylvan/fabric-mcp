#!/usr/bin/env python
"""Find unused files in tests/shared/ directory."""

import re
import sys
from pathlib import Path


def find_python_files(
    directory: Path, exclude_dirs: set[str] | None = None
) -> list[Path]:
    """Find all Python files, excluding specified directories."""
    if exclude_dirs is None:
        exclude_dirs = {"__pycache__"}

    return [
        path
        for path in directory.rglob("*.py")
        if path.name != "__init__.py"
        and not any(part in exclude_dirs for part in path.parts)
    ]


def extract_shared_imports(file_path: Path) -> set[str]:
    """Extract all imports that reference tests.shared modules."""
    try:
        content = file_path.read_text(encoding="utf-8")
    except (UnicodeDecodeError, PermissionError):
        return set()

    patterns = [
        r"from\s+tests\.shared\.([a-zA-Z_][a-zA-Z0-9_.]*)\s+import",
        r"import\s+tests\.shared\.([a-zA-Z_][a-zA-Z0-9_.]*)",
        r"from\s+\.\.shared\.([a-zA-Z_][a-zA-Z0-9_.]*)\s+import",
        r"from\s+\.shared\.([a-zA-Z_][a-zA-Z0-9_.]*)\s+import",
    ]

    imports: set[str] = set()
    for line in content.splitlines():
        if not line.strip().startswith("#"):
            for pattern in patterns:
                imports.update(re.findall(pattern, line))

    return imports


def main() -> None:
    """Find unused files in tests/shared/."""
    project_root = Path(__file__).parent.parent.parent
    shared_dir = project_root / "tests" / "shared"

    if not shared_dir.exists():
        print(f"Directory {shared_dir} does not exist")
        return

    # Collect all shared imports from test files
    test_files = find_python_files(
        project_root / "tests", {"__pycache__", "shared", "scripts"}
    )

    all_imports: set[str] = set()
    for test_file in test_files:
        all_imports.update(extract_shared_imports(test_file))

    # Find unused shared files
    shared_files = find_python_files(shared_dir)
    unused_files: list[tuple[Path, str]] = []

    for file_path in shared_files:
        import_name = (
            file_path.relative_to(shared_dir)
            .with_suffix("")
            .as_posix()
            .replace("/", ".")
        )
        if import_name not in all_imports:
            unused_files.append((file_path, import_name))

    # Report results
    if unused_files:
        print("Unused files in tests/shared/:")
        for file_path, import_name in unused_files:
            rel_path = file_path.relative_to(project_root)
            print(f"  - {rel_path} (import: {import_name})")
        print(f"\nFound {len(unused_files)} unused file(s)")
        sys.exit(1)
    else:
        print("All files in tests/shared/ are being used")


if __name__ == "__main__":
    main()
